/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dictView;

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import dictController.DictionaryController;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

/**
 *
 * @author nilesh petkar
 */
public class DictionaryViewWindow extends javax.swing.JFrame {

    private JTextField comboTextField;
    private final Vector<String> vector = new Vector<String>();
    private boolean hide_flag = false;
    private final DictionaryController controller = new DictionaryController();
    private String clearWord, isButton;
    private JPopupMenu popUpMenu;
    private JMenuItem aboutMenuItem, exitMenuItem;
    private final String animal = "animal", bird = "bird", fruit = "fruit",
            flower = "flower", vegetable = "vegetable", bodyPart = "bodypart";

    //method to set table rows for useful word section
    private void setTableRows(List<String> list) {
        model.setRowCount(0);
        for (String word : list) {
            model.addRow(new Object[]{word});
        }
        if (model.getRowCount() != 0) {
            CardLayout layout = (CardLayout) cardPanel.getLayout();
            layout.show(cardPanel, "card5");
            backBtn.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "No word found");
        }
    }

    private void setModel(DefaultComboBoxModel mdl, String str) {
        combo.setModel(mdl);
        combo.setSelectedIndex(-1);
        comboTextField.setText(str);
    }

    private static DefaultComboBoxModel getSuggestedModel(java.util.List<String> list, String text) {
        DefaultComboBoxModel m = new DefaultComboBoxModel();
        for (String s : list) {
            if (s.startsWith(text)) {
                m.addElement(s);
            }
        }
        return m;
    }

    private void checkFavWord(String text) {
        if (!controller.isFavourite(text)) {
            addFavBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/favorite black.png")));
        } else {
            addFavBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/favorite yellow.png")));
        }
    }

    private void checkFavList() {
        if (!controller.isFavouriteList()) {
            favBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/favorite black.png")));
        } else {
            favBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/favorite yellow.png")));
        }
    }

    private void checkRecentList() {
        if (!controller.isRecentList()) {
            recentBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/history black.png")));
        } else {
            recentBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/history yellow.png")));
        }
    }

    public DictionaryViewWindow() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/ico16pix/dictionaryA_Z.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        topPanel = new javax.swing.JPanel();
        combo = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        settingBtn = new javax.swing.JButton();
        cardPanel = new javax.swing.JPanel();
        wlcmPage = new javax.swing.JPanel();
        bgImage = new javax.swing.JLabel();
        mainPage = new javax.swing.JPanel();
        wodSection = new javax.swing.JPanel();
        wodTitle = new javax.swing.JLabel();
        dateVar = new javax.swing.JLabel();
        wodScroll = new javax.swing.JScrollPane();
        wodMeaning = new javax.swing.JTextArea();
        wordBtn = new javax.swing.JButton();
        usefulSection = new javax.swing.JPanel();
        usefulTitle = new javax.swing.JLabel();
        animalBtn = new javax.swing.JButton();
        birdBtn = new javax.swing.JButton();
        fruitBtn = new javax.swing.JButton();
        flowerBtn = new javax.swing.JButton();
        vegBtn = new javax.swing.JButton();
        bodyBtn = new javax.swing.JButton();
        historySection = new javax.swing.JPanel();
        searchTitle = new javax.swing.JLabel();
        favBtn = new javax.swing.JButton();
        recentBtn = new javax.swing.JButton();
        resultPage = new javax.swing.JPanel();
        innerScroller = new javax.swing.JScrollPane();
        resultPageInner = new javax.swing.JPanel();
        tiitleSection = new javax.swing.JPanel();
        searchedTitle = new javax.swing.JLabel();
        speakBtn = new javax.swing.JButton();
        addFavBtn = new javax.swing.JButton();
        resultSection = new javax.swing.JPanel();
        meaningTitle = new javax.swing.JLabel();
        meaningScroll = new javax.swing.JScrollPane();
        meaningArea = new javax.swing.JTextArea();
        exTitle = new javax.swing.JLabel();
        exScroll = new javax.swing.JScrollPane();
        exArea = new javax.swing.JTextArea();
        synoTitle = new javax.swing.JLabel();
        synoScroll = new javax.swing.JScrollPane();
        synoArea = new javax.swing.JTextArea();
        antoTitle = new javax.swing.JLabel();
        antoScroll = new javax.swing.JScrollPane();
        antoArea = new javax.swing.JTextArea();
        recentPage = new javax.swing.JPanel();
        tableScroll = new javax.swing.JScrollPane();
        recentTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column) {
                return false;
            };
        };
        removeBtnPanel = new javax.swing.JPanel();
        clrBtn = new javax.swing.JButton();
        clrAllBtn = new javax.swing.JButton();
        tableHeader = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(625, 593));
        setPreferredSize(new java.awt.Dimension(625, 593));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        topPanel.setBackground(new java.awt.Color(60, 138, 188));
        topPanel.setVisible(false);

        combo.setEditable(true);
        comboTextField = (javax.swing.JTextField) combo.getEditor().getEditorComponent();
        setModel(new DefaultComboBoxModel(vector), "");

        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico16pix/search black.png"))); // NOI18N
        searchBtn.setContentAreaFilled(false);
        searchBtn.setFocusPainted(false);
        searchBtn.addActionListener(actionlisten);
        searchBtn.addMouseListener(mouselisten);
        searchBtn.addMouseMotionListener(motionlisten);

        JScrollPane[] scroller ={wodScroll,meaningScroll,synoScroll,exScroll,synoScroll,antoScroll};
        for(JScrollPane scroll : scroller)
        {
            scroll.setBorder(null);
        }

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico16pix/left-arrow black.png"))); // NOI18N
        backBtn.setVisible(false);
        backBtn.addMouseListener(mouselisten);
        backBtn.addMouseMotionListener(motionlisten);
        backBtn.setContentAreaFilled(false);
        backBtn.setFocusPainted(false);
        backBtn.addActionListener(actionlisten);

        settingBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico16pix/settings.png"))); // NOI18N

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(combo, 0, 454, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(settingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(settingBtn)
                            .addComponent(searchBtn))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        comboTextField.addKeyListener(keylisten);
        settingBtn.setContentAreaFilled(false);
        settingBtn.setFocusPainted(false);

        popUpMenu = new JPopupMenu();
        aboutMenuItem = new JMenuItem("About");
        exitMenuItem = new JMenuItem("Exit");
        popUpMenu.add(aboutMenuItem);
        popUpMenu.add(exitMenuItem);

        settingBtn.addActionListener(actionlisten);
        aboutMenuItem.addActionListener(actionlisten);
        exitMenuItem.addActionListener(actionlisten);
        settingBtn.addMouseMotionListener(motionlisten);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        cardPanel.setBackground(new java.awt.Color(255, 255, 255));
        cardPanel.setLayout(new java.awt.CardLayout());

        wlcmPage.setLayout(new java.awt.BorderLayout());

        bgImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open-book modified.jpg"))); // NOI18N
        wlcmPage.add(bgImage, java.awt.BorderLayout.PAGE_START);

        cardPanel.add(wlcmPage, "card2");

        mainPage.setBackground(new java.awt.Color(255, 255, 255));

        wodSection.setBackground(new java.awt.Color(250, 250, 250));

        wodTitle.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        wodTitle.setForeground(new java.awt.Color(153, 204, 255));
        wodTitle.setText("Word of the Day");

        dateVar.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        dateVar.setForeground(new java.awt.Color(153, 204, 255));
        dateVar.setText(controller.getDate());

        wodMeaning.setEditable(false);
        wodMeaning.setBackground(new java.awt.Color(250, 250, 250));
        wodMeaning.setColumns(20);
        wodMeaning.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        wodMeaning.setLineWrap(true);
        wodMeaning.setText("texta area");
        wodMeaning.setBorder(null);
        wodScroll.setViewportView(wodMeaning);

        wordBtn.setFont(new java.awt.Font("Lucida Sans", 1, 26)); // NOI18N
        wordBtn.setForeground(new java.awt.Color(0, 102, 204));
        wordBtn.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout wodSectionLayout = new javax.swing.GroupLayout(wodSection);
        wodSection.setLayout(wodSectionLayout);
        wodSectionLayout.setHorizontalGroup(
            wodSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wodSectionLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(wodSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wodSectionLayout.createSequentialGroup()
                        .addComponent(wodTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 252, Short.MAX_VALUE)
                        .addComponent(dateVar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(wodSectionLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(wodSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wodScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        wodSectionLayout.setVerticalGroup(
            wodSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wodSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wodSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wodTitle)
                    .addComponent(dateVar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wordBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wodScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        wordBtn.setMargin(new java.awt.Insets(10,0,10,10));
        wordBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        wordBtn.setContentAreaFilled(false);
        wordBtn.setFocusPainted(false);
        wordBtn.addActionListener(actionlisten);
        wordBtn.addMouseMotionListener(motionlisten);
        wordBtn.setText(controller.getWordOfDay().get(0).toUpperCase());
        wodMeaning.setText(controller.getWordOfDay().get(1));

        usefulSection.setBackground(new java.awt.Color(250, 250, 250));
        usefulSection.setForeground(new java.awt.Color(153, 204, 255));

        usefulTitle.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        usefulTitle.setForeground(new java.awt.Color(153, 204, 255));
        usefulTitle.setText("UseFul Words");

        animalBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico24pix/lion.png"))); // NOI18N
        animalBtn.setText("Animals");
        animalBtn.addActionListener(actionlisten);

        birdBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico24pix/birds.png"))); // NOI18N
        birdBtn.setText("Birds");
        birdBtn.addActionListener(actionlisten);

        fruitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico24pix/cherries.png"))); // NOI18N
        fruitBtn.setText("Fruits");
        fruitBtn.addActionListener(actionlisten);

        flowerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico24pix/flower.png"))); // NOI18N
        flowerBtn.setText("Flowers");
        flowerBtn.addActionListener(actionlisten);

        vegBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico24pix/carrot.png"))); // NOI18N
        vegBtn.setText("Vegetables");
        vegBtn.addActionListener(actionlisten);

        bodyBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico24pix/muscle.png"))); // NOI18N
        bodyBtn.setText("Body Parts");
        bodyBtn.addActionListener(actionlisten);

        javax.swing.GroupLayout usefulSectionLayout = new javax.swing.GroupLayout(usefulSection);
        usefulSection.setLayout(usefulSectionLayout);
        usefulSectionLayout.setHorizontalGroup(
            usefulSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usefulSectionLayout.createSequentialGroup()
                .addGroup(usefulSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(usefulSectionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(usefulTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(usefulSectionLayout.createSequentialGroup()
                        .addContainerGap(56, Short.MAX_VALUE)
                        .addGroup(usefulSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(flowerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(animalBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addGroup(usefulSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(birdBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(vegBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addGroup(usefulSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fruitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bodyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        usefulSectionLayout.setVerticalGroup(
            usefulSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usefulSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usefulTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(usefulSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(animalBtn)
                    .addComponent(birdBtn)
                    .addComponent(fruitBtn))
                .addGap(18, 18, 18)
                .addGroup(usefulSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flowerBtn)
                    .addComponent(vegBtn)
                    .addComponent(bodyBtn))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.JButton[] buttons={animalBtn,fruitBtn,birdBtn,flowerBtn,
            vegBtn,bodyBtn};
        for(javax.swing.JButton button : buttons)
        {
            button.setFont(new java.awt.Font("Comic Sans MS", 0, 11));
            //  button.setContentAreaFilled(false);
            //  button.setFocusPainted(false);
        }

        historySection.setBackground(new java.awt.Color(250, 250, 250));

        searchTitle.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        searchTitle.setForeground(new java.awt.Color(153, 204, 255));
        searchTitle.setText("Searched Words");

        favBtn.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        favBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico24pix/favorite black.png"))); // NOI18N
        favBtn.setText("Favourites");
        favBtn.addActionListener(actionlisten);

        recentBtn.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        recentBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico24pix/history black.png"))); // NOI18N
        recentBtn.setText("Recent");
        recentBtn.addActionListener(actionlisten);

        javax.swing.GroupLayout historySectionLayout = new javax.swing.GroupLayout(historySection);
        historySection.setLayout(historySectionLayout);
        historySectionLayout.setHorizontalGroup(
            historySectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historySectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(historySectionLayout.createSequentialGroup()
                .addContainerGap(118, Short.MAX_VALUE)
                .addComponent(favBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114)
                .addComponent(recentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );
        historySectionLayout.setVerticalGroup(
            historySectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historySectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(historySectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recentBtn)
                    .addComponent(favBtn))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout mainPageLayout = new javax.swing.GroupLayout(mainPage);
        mainPage.setLayout(mainPageLayout);
        mainPageLayout.setHorizontalGroup(
            mainPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPageLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wodSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(historySection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usefulSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPageLayout.setVerticalGroup(
            mainPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wodSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(usefulSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(historySection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        cardPanel.add(mainPage, "card3");

        resultPage.setBackground(new java.awt.Color(255, 255, 255));

        innerScroller.setBorder(null);

        resultPageInner.setBackground(new java.awt.Color(255, 255, 255));

        tiitleSection.setBackground(new java.awt.Color(250, 250, 250));
        tiitleSection.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        searchedTitle.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        searchedTitle.setText("search title");
        tiitleSection.add(searchedTitle);

        speakBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico16pix/speaker mute.png"))); // NOI18N
        speakBtn.setContentAreaFilled(false);
        speakBtn.setFocusPainted(false);
        speakBtn.addMouseListener(mouselisten);
        speakBtn.addMouseMotionListener(motionlisten);
        speakBtn.addActionListener(actionlisten);
        tiitleSection.add(speakBtn);

        addFavBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ico16pix/favorite yellow.png"))); // NOI18N
        addFavBtn.setBorderPainted(false);
        addFavBtn.setContentAreaFilled(false);
        addFavBtn.setFocusPainted(false);
        addFavBtn.setToolTipText("Add Favourite");
        addFavBtn.addActionListener(actionlisten);
        addFavBtn.addMouseMotionListener(motionlisten);
        tiitleSection.add(addFavBtn);

        resultSection.setBackground(new java.awt.Color(250, 250, 250));
        resultSection.setForeground(new java.awt.Color(153, 204, 255));

        meaningTitle.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        meaningTitle.setForeground(new java.awt.Color(153, 204, 255));
        meaningTitle.setText("Meaning");

        meaningArea.setEditable(false);
        meaningArea.setBackground(new java.awt.Color(250, 250, 250));
        meaningArea.setColumns(10);
        meaningArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        meaningArea.setLineWrap(true);
        meaningScroll.setViewportView(meaningArea);

        exTitle.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        exTitle.setForeground(new java.awt.Color(153, 204, 255));
        exTitle.setText("Example");

        exArea.setEditable(false);
        exArea.setBackground(new java.awt.Color(250, 250, 250));
        exArea.setColumns(10);
        exArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        exArea.setLineWrap(true);
        exScroll.setViewportView(exArea);

        synoTitle.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        synoTitle.setForeground(new java.awt.Color(153, 204, 255));
        synoTitle.setText("Synonyms");

        synoArea.setEditable(false);
        synoArea.setBackground(new java.awt.Color(250, 250, 250));
        synoArea.setColumns(10);
        synoArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        synoArea.setLineWrap(true);
        synoScroll.setViewportView(synoArea);

        antoTitle.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        antoTitle.setForeground(new java.awt.Color(153, 204, 255));
        antoTitle.setText("Antonyms");

        antoArea.setEditable(false);
        antoArea.setBackground(new java.awt.Color(250, 250, 250));
        antoArea.setColumns(10);
        antoArea.setLineWrap(true);
        antoScroll.setViewportView(antoArea);

        javax.swing.GroupLayout resultSectionLayout = new javax.swing.GroupLayout(resultSection);
        resultSection.setLayout(resultSectionLayout);
        resultSectionLayout.setHorizontalGroup(
            resultSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(meaningScroll)
                    .addComponent(exScroll)
                    .addComponent(synoScroll)
                    .addGroup(resultSectionLayout.createSequentialGroup()
                        .addGroup(resultSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(meaningTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(synoTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(antoTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(antoScroll))
                .addContainerGap())
        );
        resultSectionLayout.setVerticalGroup(
            resultSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(meaningTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(meaningScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(exTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(synoTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(synoScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(antoTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(antoScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout resultPageInnerLayout = new javax.swing.GroupLayout(resultPageInner);
        resultPageInner.setLayout(resultPageInnerLayout);
        resultPageInnerLayout.setHorizontalGroup(
            resultPageInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPageInnerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultPageInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tiitleSection, javax.swing.GroupLayout.DEFAULT_SIZE, 1113, Short.MAX_VALUE)))
        );
        resultPageInnerLayout.setVerticalGroup(
            resultPageInnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPageInnerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tiitleSection, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resultSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        innerScroller.setViewportView(resultPageInner);

        javax.swing.GroupLayout resultPageLayout = new javax.swing.GroupLayout(resultPage);
        resultPage.setLayout(resultPageLayout);
        resultPageLayout.setHorizontalGroup(
            resultPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(innerScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
        );
        resultPageLayout.setVerticalGroup(
            resultPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(innerScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
        );

        cardPanel.add(resultPage, "card4");

        recentPage.setBackground(new java.awt.Color(255, 204, 204));
        recentPage.setLayout(new java.awt.BorderLayout());

        tableScroll.setBorder(null);

        model = new javax.swing.table.DefaultTableModel();
        recentTable.setModel(model);
        model.addColumn("ok");
        recentTable.setRowHeight(20);
        recentTable.setTableHeader(null);
        recentTable.setShowHorizontalLines(false);
        recentTable.setShowVerticalLines(false);
        tableScroll.setViewportView(recentTable);
        recentTable.addMouseListener(mouselisten);

        recentPage.add(tableScroll, java.awt.BorderLayout.CENTER);

        removeBtnPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING));

        clrBtn.setText("Clear");
        clrBtn.addActionListener(actionlisten);
        removeBtnPanel.add(clrBtn);

        clrAllBtn.setText("Clear All");
        removeBtnPanel.add(clrAllBtn);
        clrAllBtn.addActionListener(actionlisten);

        recentPage.add(removeBtnPanel, java.awt.BorderLayout.PAGE_END);

        tableHeader.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        tableHeader.setOpaque(true);
        recentPage.add(tableHeader, java.awt.BorderLayout.PAGE_START);

        cardPanel.add(recentPage, "card5");

        getContentPane().add(cardPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    KeyListener keylisten = new KeyListener() {

        @Override
        public void keyTyped(KeyEvent e) {
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    String text = comboTextField.getText();
                    if (text.length() == 0) {
                        combo.hidePopup();
                        setModel(new DefaultComboBoxModel(), "");
                    } else {
                        java.util.List<String> list = controller.getSuggestion(text.toLowerCase());
                        for (String s : list) {
                            if (!vector.contains(s)) {
                                vector.addElement(s);
                            }
                        }

                        DefaultComboBoxModel m = getSuggestedModel(vector, text.toLowerCase());
                        if (m.getSize() == 0 || hide_flag) {
                            combo.hidePopup();
                            hide_flag = false;
                        } else {
                            setModel(m, text);
                            combo.showPopup();
                        }
                    }
                }
            });

        }

        @Override
        public void keyPressed(KeyEvent e) {
            int code = e.getKeyCode();
            if (code == KeyEvent.VK_ENTER) {
                hide_flag = true;
            }
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    };

    ActionListener actionlisten = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == searchBtn) {
                List<String> list;
                if (comboTextField.getText().length() != 0) {
                    String text = comboTextField.getText();
                    list = controller.getMeaning(text.toLowerCase());
                    if (list.size() > 1) {
                        CardLayout layout = (CardLayout) cardPanel.getLayout();
                        layout.show(cardPanel, "card4");

                        backBtn.setVisible(true);
                        searchedTitle.setText(list.get(0).toUpperCase());
                        meaningArea.setText(list.get(1));
                        exArea.setText(list.get(2));
                        synoArea.setText(list.get(3));
                        antoArea.setText(list.get(4));
                        controller.setRecentColumn(text);
                        checkFavWord(text);
                    } else {
                        String msg = "                        No word found!";
                        JOptionPane.showMessageDialog(rootPane, msg, null, JOptionPane.PLAIN_MESSAGE);
                        comboTextField.setText("");
                    }
                } else {
                    String msg = "            Please enter the word to find";
                    JOptionPane.showMessageDialog(rootPane, msg, null, JOptionPane.PLAIN_MESSAGE);
                }
            }
            if (e.getSource() == backBtn) {
                CardLayout layout = (CardLayout) cardPanel.getLayout();
                comboTextField.setText("");
                backBtn.setVisible(false);
                layout.show(cardPanel, "card3");
                checkFavList();
                checkRecentList();
                clearWord = null;
            }
            if (e.getSource() == settingBtn) {
                showSettingPopUp(e);
            }
            if (e.getSource() == aboutMenuItem) {
                String msg = "                                             VERSION : 1.2345\n";
                msg = msg + "                                      ----PROGRAMMER----\n";
                msg = msg + "                                          Mr. Nilesh K. Petkar\n";
                msg = msg + "------------------------------------------------------------------------\n";
                msg = msg + "                      Nilesh is a passionate programmer & learner\n";
                msg = msg + "             He loves to Programming in JAVA, SERVLET, JSP, & PHP       \n";
                msg = msg + "               He is doing Master in Computer Application (M.C.A)\n";
                msg = msg + "                   He is resident of Nagpur, Maharashtra, India\n";
                JOptionPane.showMessageDialog(rootPane, msg, "About", JOptionPane.PLAIN_MESSAGE);
            }
            if (e.getSource() == exitMenuItem) {
                System.exit(0);
            }
            if (e.getSource() == recentBtn) {
                tableHeader.setText("Recent Searches");
                tableHeader.setIcon(null);
                model.setRowCount(0);
                List<String> list = controller.getRecentColumn();
                for (String recentWord : list) {
                    model.addRow(new Object[]{recentWord});
                }
                if (model.getRowCount() != 0) {
                    CardLayout layout = (CardLayout) cardPanel.getLayout();
                    layout.show(cardPanel, "card5");
                    backBtn.setVisible(true);
                    removeBtnPanel.setVisible(true);
                    isButton = "recent";
                } else {
                    String msg = "                      No recent searches!";
                    JOptionPane.showMessageDialog(rootPane, msg, "", JOptionPane.PLAIN_MESSAGE);
                }
            }
            if (e.getSource() == favBtn) {
                tableHeader.setText("Favourite item");
                tableHeader.setIcon(null);
                model.setRowCount(0);
                List<String> list = controller.getFavColumn();
                for (String favWord : list) {
                    model.addRow(new Object[]{favWord});
                }
                if (model.getRowCount() != 0) {
                    CardLayout layout = (CardLayout) cardPanel.getLayout();
                    layout.show(cardPanel, "card5");
                    backBtn.setVisible(true);
                    removeBtnPanel.setVisible(true);
                    isButton = "fav";
                } else {
                    String msg = "                  No item in the favourite list!";
                    JOptionPane.showMessageDialog(rootPane, msg, "", JOptionPane.PLAIN_MESSAGE);
                }
            }
            if (e.getSource() == wordBtn) {
                String text = wordBtn.getText().toLowerCase();
                List<String> list = controller.getMeaning(text);

                if (list.size() > 1) {
                    CardLayout layout = (CardLayout) cardPanel.getLayout();
                    layout.show(cardPanel, "card4");

                    backBtn.setVisible(true);
                    searchedTitle.setText(list.get(0).toUpperCase());
                    meaningArea.setText(list.get(1));
                    exArea.setText(list.get(2));
                    synoArea.setText(list.get(3));
                    antoArea.setText(list.get(4));
                    controller.setRecentColumn(text);
                    comboTextField.setText(text);
                    checkFavWord(text);   //to check word is fav or not
                } else {
                    JOptionPane.showMessageDialog(rootPane, "no word found");
                    comboTextField.setText("");
                }
            }
            if (e.getSource() == addFavBtn) {
                String word = comboTextField.getText();
                boolean isFav = controller.isFavourite(word);
                if (!isFav) {
                    controller.setFavourite(word);
                    addFavBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/favorite yellow.png")));
                } else {
                    controller.unSetFavourite(word);
                    addFavBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/favorite black.png")));
                }
            }
            if (e.getSource() == clrBtn) {
                if (isButton.equals("recent")) {
                    System.out.println("recent button");
                    if (clearWord != null) {
                        controller.clearRecentWord(clearWord);
                        model.setRowCount(0);
                        List<String> list = controller.getRecentColumn();
                        for (String recentWord : list) {
                            model.addRow(new Object[]{recentWord});
                        }
                        clearWord = null;
                        comboTextField.setText("");
                        if (model.getRowCount() == 0) {
                            try {
                                Thread.sleep(200);
                                backBtn.doClick();
                            } catch (Exception ex) {
                            }
                        }
                    }                     else
                    {
                       String msg = "                       Please select the item";
                       JOptionPane.showMessageDialog(rootPane, msg, "", JOptionPane.PLAIN_MESSAGE);
                    }
                }
                if (isButton.equals("fav")) {
                    System.out.println("favourite button");
                    System.out.println(clearWord);
                    if (clearWord != null) {
                        controller.clearFavWord(clearWord);
                        model.setRowCount(0);
                        List<String> list = controller.getFavColumn();
                        for (String favWord : list) {
                            model.addRow(new Object[]{favWord});
                        }
                        clearWord = null;
                        comboTextField.setText("");
                        if (model.getRowCount() == 0) {
                            try {
                                Thread.sleep(200);
                                backBtn.doClick();
                            } catch (Exception ex) {
                            }
                        }
                    }                     else
                    {
                       String msg = "                       Please select the item";
                       JOptionPane.showMessageDialog(rootPane, msg, "", JOptionPane.PLAIN_MESSAGE);
                    }
                }
            }
            if (e.getSource() == clrAllBtn) {
                if (isButton.equals("recent")) {
                    String msg = "              Do you want to delete all items?";
                    int n = JOptionPane.showConfirmDialog(rootPane, msg, null, JOptionPane.YES_NO_OPTION,JOptionPane.PLAIN_MESSAGE);
                    System.out.println("option " + n);
                    if (n == 0) {
                        controller.clearAllRecent();
                        try {
                            Thread.sleep(300);
                            backBtn.doClick();
                        } catch (Exception ex) {
                        }
                        clearWord = null;
                    }
                    if (n == 1) {
                        System.out.println("not deleted");
                    }
                }
                if (isButton.equals("fav")) {
                    String msg = "              Do you want to delete all items?";
                    int n = JOptionPane.showConfirmDialog(rootPane, msg, null, JOptionPane.YES_NO_OPTION,JOptionPane.PLAIN_MESSAGE);
                    System.out.println("option " + n);
                    if (n == 0) {
                        controller.clearAllFav();
                        backBtn.doClick();  //programatically click back button
                        clearWord = null;
                    }
                    if (n == 1) {
                        System.out.println("not deleted");
                    }
                }
            }
            if (e.getSource() == animalBtn) {
                List<String> list = controller.getUsefulWordList(animal);
                setTableRows(list);
                tableHeader.setText("Animal");
                tableHeader.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/lion.png")));
                removeBtnPanel.setVisible(false);
            }
            if (e.getSource() == birdBtn) {
                List<String> list = controller.getUsefulWordList(bird);
                setTableRows(list);
                removeBtnPanel.setVisible(false);
                tableHeader.setText("bird");
                tableHeader.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/birds.png")));
            }
            if (e.getSource() == fruitBtn) {
                List<String> list = controller.getUsefulWordList(fruit);
                setTableRows(list);
                tableHeader.setText("Fruit");
                tableHeader.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/cherries.png")));
                removeBtnPanel.setVisible(false);
            }
            if (e.getSource() == flowerBtn) {
                List<String> list = controller.getUsefulWordList(flower);
                setTableRows(list);
                tableHeader.setText("Flowers");
                tableHeader.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/flower.png")));
                removeBtnPanel.setVisible(false);
            }
            if (e.getSource() == vegBtn) {
                List<String> list = controller.getUsefulWordList(vegetable);
                setTableRows(list);
                tableHeader.setText("Vegetables");
                tableHeader.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/carrot.png")));
                removeBtnPanel.setVisible(false);
            }
            if (e.getSource() == bodyBtn) {
                List<String> list = controller.getUsefulWordList(bodyPart);
                setTableRows(list);
                tableHeader.setText("Body Parts");
                tableHeader.setIcon(new ImageIcon(getClass().getResource("/images/ico24pix/muscle.png")));
                removeBtnPanel.setVisible(false);
            }
            if (e.getSource() == speakBtn) {
                String voiceText = searchedTitle.getText();
                Voice voice1 = VoiceManager.getInstance().getVoice("kevin");
                voice1.allocate();
                voice1.speak(voiceText);
            }
        }
    };
    MouseListener mouselisten = new MouseAdapter() {
        public void mouseExited(MouseEvent e) {
            if (e.getSource() == searchBtn) {
                searchBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/search black.png")));
            }
            if (e.getSource() == backBtn) {
                backBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/left-arrow black.png")));
            }
            if (e.getSource() == speakBtn) {
                speakBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/speaker mute.png")));
            }
        }

        public void mouseClicked(MouseEvent e) {
            if (e.getSource() == recentTable) {
                clearWord = model.getValueAt(recentTable.getSelectedRow(), 0).toString();
                comboTextField.setText(clearWord);
            }
        }
    };
    MouseMotionListener motionlisten = new MouseMotionAdapter() {
        public void mouseMoved(MouseEvent e) {
            if (e.getSource() == searchBtn) {
                searchBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/search white.png")));
            }
            if (e.getSource() == backBtn) {
                backBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/left-arrow white.png")));
            }
            if (e.getSource() == speakBtn) {
                speakBtn.setIcon(new ImageIcon(getClass().getResource("/images/ico16pix/speaker red.png")));
            }
            if (e.getSource() == wordBtn) {
                wordBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
            if (e.getSource() == addFavBtn) {
                if (!controller.isFavourite(comboTextField.getText())) {
                    addFavBtn.setToolTipText("Add Favourite");
                } else {
                    addFavBtn.setToolTipText("Remove Favourite");
                }
            }
        }

    };

    private void showSettingPopUp(ActionEvent e) {
        Component button = (Component) e.getSource();
        Point point = button.getLocationOnScreen();
        popUpMenu.show(this, 0, 0);
        popUpMenu.setLocation(point.x - 60, point.y + button.getHeight());
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        CardLayout layout = (CardLayout) cardPanel.getLayout();
        try {
            layout.show(cardPanel, "card2");
            Thread.sleep(1000);
        } catch (Exception ie) {
            ie.printStackTrace();
        }
        topPanel.setVisible(true);
        backBtn.setVisible(false);
        layout.show(cardPanel, "card3");
        checkFavList();
        checkRecentList();
    }//GEN-LAST:event_formWindowOpened

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        Dimension size = evt.getComponent().getBounds().getSize();
        System.out.println("size changes " + size);
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DictionaryViewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DictionaryViewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DictionaryViewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DictionaryViewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //  new DictionaryMainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFavBtn;
    private javax.swing.JButton animalBtn;
    private javax.swing.JTextArea antoArea;
    private javax.swing.JScrollPane antoScroll;
    private javax.swing.JLabel antoTitle;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel bgImage;
    private javax.swing.JButton birdBtn;
    private javax.swing.JButton bodyBtn;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JButton clrAllBtn;
    private javax.swing.JButton clrBtn;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JLabel dateVar;
    private javax.swing.JTextArea exArea;
    private javax.swing.JScrollPane exScroll;
    private javax.swing.JLabel exTitle;
    private javax.swing.JButton favBtn;
    private javax.swing.JButton flowerBtn;
    private javax.swing.JButton fruitBtn;
    private javax.swing.JPanel historySection;
    private javax.swing.JScrollPane innerScroller;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel mainPage;
    private javax.swing.JTextArea meaningArea;
    private javax.swing.JScrollPane meaningScroll;
    private javax.swing.JLabel meaningTitle;
    private javax.swing.JButton recentBtn;
    private javax.swing.JPanel recentPage;
    private javax.swing.JTable recentTable;
    private javax.swing.table.DefaultTableModel model;
    private javax.swing.JPanel removeBtnPanel;
    private javax.swing.JPanel resultPage;
    private javax.swing.JPanel resultPageInner;
    private javax.swing.JPanel resultSection;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel searchTitle;
    private javax.swing.JLabel searchedTitle;
    private javax.swing.JButton settingBtn;
    private javax.swing.JButton speakBtn;
    private javax.swing.JTextArea synoArea;
    private javax.swing.JScrollPane synoScroll;
    private javax.swing.JLabel synoTitle;
    private javax.swing.JLabel tableHeader;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JPanel tiitleSection;
    private javax.swing.JPanel topPanel;
    private javax.swing.JPanel usefulSection;
    private javax.swing.JLabel usefulTitle;
    private javax.swing.JButton vegBtn;
    private javax.swing.JPanel wlcmPage;
    private javax.swing.JTextArea wodMeaning;
    private javax.swing.JScrollPane wodScroll;
    private javax.swing.JPanel wodSection;
    private javax.swing.JLabel wodTitle;
    private javax.swing.JButton wordBtn;
    // End of variables declaration//GEN-END:variables
}
